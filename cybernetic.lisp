;; cybernetic.lisp - The main cybernetic artworld code.
;; Copyright (C) 2023 Myers Studio, Ltd.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(in-package :cybernetic)

(defparameter seasons #("Spring" "Summer" "Autumn" "Winter"))

(defun format-date (months)
  (format nil "~a ~d"
          (aref seasons (mod (floor months 3) 4))
          (floor months 12)))

(defclass <cybernetic> ()
  ((date :initform (* 1950 12)
         :accessor date
         :documentation "The current month since 0.")
   (artist :initarg :artist
           :accessor artist
           :documentation "The cybernetic artist.")
   (critic :initarg :critic
           :accessor critic
           :documentation "The cybernetic critic.")
   (collector :initarg :collector
              :accessor collector
              :documentation "The cybernetic collector.")
   (artworks :initform #()
             :accessor artworks
             :documentation "Artworks created by the artist recently.")
   (critiques :initform #()
              :accessor critiques
              :documentation "Critiques generated by the critic recently.")
   (collected :initform #()
              :accessor collected
              :documentation "Purchases by the collector recently")))

(defun make-cybernetic ()
  (make-instance '<cybernetic>
                 :artist (cyberartist:make-cyberartist)
                 :critic (cybercritic:make-cybercritic)
                 :collector (cybercollector:make-cybercollector)))

(defun run-artist (artworld)
  (let* ((count (+ (random 11) 1))
         (artworks (make-array count)))
    (dotimes (i count)
      (setf (aref artworks i)
            (cyberartist:create-art (artist artworld))))
    (setf (artworks artworld) artworks)
    (format t "The artist created new artworks depicting:~%")
    (loop for artwork across artworks
          do (format t "    ~a.~%" artwork))))

(defun run-critic (artworld)
  (setf (critiques artworld)
        (cybercritic:critique-art (critic artworld)
                                  (artworks artworld)))
  (format t "The critic had this to say about them:~%")
    (loop for critique across (critiques artworld)
          do (format t "    ~a~%" critique))
  (format t "Based on their current aesthetic:~%")
  (cybercritic:print-aesthetic (critic artworld))
  (cybercritic:update (critic artworld)))

(defun run-collector (artworld)
  (setf (collected artworld)
        (cybercollector:collect-art (collector artworld)
                                    (artworks artworld)
                                    (critiques artworld)))
  (if (= (length (collected artworld)) 0)
      (format t "The collector did not buy any of the artworks.~%")
      (progn
        (format t "The collector bought the following artwork~p:~%"
                (length (collected artworld)))
        (loop for collecting across (collected artworld)
              do (format t "    ~a~%" collecting)))))

(defun run-cybernetic (artworld)
  (format t "~%")
  (format t "~a~%" (format-date (date artworld)))
  (format t "~%")
  (run-artist artworld)
  (format t "~%")
  (run-critic artworld)
  (format t "~%")
  (run-collector artworld)
  (format t "~%")
  (incf (date artworld) 3))

(defun run-cybernetic-until-collector-collects (artworld)
  (loop while (= (length (collected artworld)) 0)
        do (run-cybernetic artworld)))
